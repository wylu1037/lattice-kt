package com.example.abi

import junit.framework.TestCase.assertEquals
import kotlin.test.Test


class LatticeAbiTest {

    companion object {
        const val LEDGER_ABI_FILENAME = "ledgerContract.json"
    }

    object ResourceUtils {
        fun readFileContent(fileName: String): String {
            return ResourceUtils::class.java.classLoader.getResourceAsStream(fileName)?.use {
                it.bufferedReader().readText()
            } ?: throw IllegalArgumentException("File not found: $fileName")
        }
    }
    
    @Test
    fun `encode writeTraceability`() {
        val args = arrayOf<Any>(
            "10001",
            "0x516482b2880721149f75c9aea3b6a6a700022c78561f6e22fbd0d4f73e5e7432",
            arrayOf("0x0900000000000000000000000000000000000000000000000000000000000000"),
            "0x561717f7922a233720ae38acaa4174cda0bf1766"
        )
        val abi = ResourceUtils.readFileContent(LEDGER_ABI_FILENAME)
        val code = LatticeAbi(abi).getFunction("writeTraceability").encode(args)
        val expected =
            "0x4131ff53000000000000000000000000000000000000000000000000000000000000271100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000100000000000000000000000000561717f7922a233720ae38acaa4174cda0bf1766000000000000000000000000000000000000000000000000000000000000004230783531363438326232383830373231313439663735633961656133623661366137303030323263373835363166366532326662643064346637336535653734333200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010900000000000000000000000000000000000000000000000000000000000000"
        println(code)
        assertEquals(expected, code)
    }

    @Test
    fun `decode writeTraceability`() {
        val rawCode =
            "0x000000000000000000000000000000000000000000000000000000000000271100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000100000000000000000000000000561717f7922a233720ae38acaa4174cda0bf1766000000000000000000000000000000000000000000000000000000000000004230783531363438326232383830373231313439663735633961656133623661366137303030323263373835363166366532326662643064346637336535653734333200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010900000000000000000000000000000000000000000000000000000000000000"
        val abi = ResourceUtils.readFileContent(LEDGER_ABI_FILENAME)
        val code = LatticeAbi(abi).getFunction("writeTraceability").decode(rawCode)
        println(code)
    }

    @Test
    fun `encode setDataSecret`() {
        val args = arrayOf<Any>(
            "0x516482b2880721149f75c9aea3b6a6a700022c78561f6e22fbd0d4f73e5e7432",
            "0x561717f7922a233720ae38acaa4174cda0bf1766",
        )
        val abi = ResourceUtils.readFileContent(LEDGER_ABI_FILENAME)
        val code = LatticeAbi(abi).getFunction("setDataSecret").encode(args)
        val expected =
            "0xa2ec96570000000000000000000000000000000000000000000000000000000000000040000000000000000000000000561717f7922a233720ae38acaa4174cda0bf17660000000000000000000000000000000000000000000000000000000000000042307835313634383262323838303732313134396637356339616561336236613661373030303232633738353631663665323266626430643466373365356537343332000000000000000000000000000000000000000000000000000000000000"
        assertEquals(expected, code)
    }

    @Test
    fun `decode setDataSecret`() {
        val expected =
            "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000561717f7922a233720ae38acaa4174cda0bf17660000000000000000000000000000000000000000000000000000000000000042307835313634383262323838303732313134396637356339616561336236613661373030303232633738353631663665323266626430643466373365356537343332000000000000000000000000000000000000000000000000000000000000"
        val abi = ResourceUtils.readFileContent(LEDGER_ABI_FILENAME)
        val code = LatticeAbi(abi).getFunction("setDataSecret").decode(expected)
        assertEquals(expected, code)
    }

    @Test
    fun `encode getTraceability`() {
        val args = arrayOf<Any>(
            "1234",
            "561717f7922a233720ae38acaa4174cda0bf1766"
        )
        val expected =
            "0x295adafb0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000561717f7922a233720ae38acaa4174cda0bf176600000000000000000000000000000000000000000000000000000000000000043132333400000000000000000000000000000000000000000000000000000000"
        val abi = ResourceUtils.readFileContent(LEDGER_ABI_FILENAME)
        val code = LatticeAbi(abi).getFunction("getTraceability").encode(args)
        assertEquals(expected, code)
    }

    @Test
    fun `encode writeTraceabilityBatch`() {
        val args = arrayOf<Any>(
            arrayOf<Any>(
                arrayOf<Any>(
                    111222333L,
                    "str0",
                    arrayOf("0x516482b2880721149f75c9aea3b6a6a700022c78561f6e22fbd0d4f73e5e7432"),
                    "0x561717f7922a233720ae38acaa4174cda0bf1766"
                )
            )
        )
        val expected =
            "0x77b34b730000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000006a11e3d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000561717f7922a233720ae38acaa4174cda0bf1766000000000000000000000000000000000000000000000000000000000000000473747230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001516482b2880721149f75c9aea3b6a6a700022c78561f6e22fbd0d4f73e5e7432"
        val abi = ResourceUtils.readFileContent(LEDGER_ABI_FILENAME)
        val code = LatticeAbi(abi).getFunction("writeTraceabilityBatch").encode(args)
        assertEquals(expected, code)
    }

    @Test
    fun `encode writeTraceabilityBatch version2`() {
        val args = arrayOf<Any>(
            arrayOf<Any>(
                arrayOf<Any>(
                    111222333L,
                    "str0",
                    arrayOf("0x516482b2880721149f75c9aea3b6a6a700022c78561f6e22fbd0d4f73e5e7432"),
                    "0x561717f7922a233720ae38acaa4174cda0bf1766"
                ),
                arrayOf<Any>(
                    "111222333",
                    "str0",
                    arrayOf("0x516482b2880721149f75c9aea3b6a6a700022c78561f6e22fbd0d4f73e5e7432"),
                    "0x561717f7922a233720ae38acaa4174cda0bf1766"
                )
            )
        )
        val expected =
            "0x77b34b7300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000006a11e3d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000561717f7922a233720ae38acaa4174cda0bf1766000000000000000000000000000000000000000000000000000000000000000473747230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001516482b2880721149f75c9aea3b6a6a700022c78561f6e22fbd0d4f73e5e74320000000000000000000000000000000000000000000000000000000006a11e3d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000561717f7922a233720ae38acaa4174cda0bf1766000000000000000000000000000000000000000000000000000000000000000473747230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001516482b2880721149f75c9aea3b6a6a700022c78561f6e22fbd0d4f73e5e7432"
        val abi = ResourceUtils.readFileContent(LEDGER_ABI_FILENAME)
        val code = LatticeAbi(abi).getFunction("writeTraceabilityBatch").encode(args)
        println(code)
        assertEquals(expected, code)
    }

    @Test
    fun `encode fixed array`() {
        val abi =
            "[{\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[2]\",\"name\":\"_name\",\"type\":\"string[2]\"}],\"name\":\"set\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
        val code = LatticeAbi(abi).getFunction("set").encode(arrayOf(arrayOf("1", "2")))
        println(code)
        val expected =
            "0x74d379540000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013200000000000000000000000000000000000000000000000000000000000000"
        assertEquals(expected, code)
        // 0x74d379540000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013200000000000000000000000000000000000000000000000000000000000000
    }
}